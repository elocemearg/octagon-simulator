#!/usr/bin/python3

# Take the png or .jpg files in ./images and create a font.js file containing
# an array of data-URLs containing the PNG or JPG for each character. These
# data-URLs are used by draw.js to make a canvas for each character.
# font.js will also contain symbolic constants for each character, such as
# DIGIT0 = 0, DIGIT1 = 1, etc.

import sys
import os
import base64

image_dir = "images"
image_extensions = [ ".png", ".jpg" ]
extension_to_mime = {
    ".png" : "image/png",
    ".jpg" : "image/jpeg"
}
output_file = "font.js"

filenames = [
        "0", "1", "2", "3", "4",
        "5", "6", "7", "8", "9", "colon",
        "numbertopbottomborder", "leftborder", "rightborder",
        "space", "dot", "minus"
]

symbolic_names = [ "DIGIT" + str(x) for x in range(0, 10) ] + [
        "COLON", "NUMBER_BORDER", "LEFT_BORDER", "RIGHT_BORDER",
        "SPACE", "DOT", "MINUS"
]

# if font.js exists, back it up
if os.path.exists(output_file):
    os.rename(output_file, output_file + ".old")

try:
    # Get a list of all subdirectories in image_dir
    dir_names = []
    for ent in os.scandir(image_dir):
        if ent.name and ent.name[0] != '.':
            if ent.is_dir():
                dir_names.append(ent.name)
    dir_names = sorted(dir_names)

    with open(output_file, "w") as fout:
        # characterDesignUrls is going to be a dictionary of design names
        # mapping to arrays of URLs. Each URL references or describes an image
        # and they are in a particular order as defined in symbolic_names.
        fout.write("""
/* This file is generated by gendata.py, which converts the image files in
 * %s/<DESIGN_NAME>/ into the data URLs below. If you need to modify this
 * file, you may find it easier to modify the source PNGs and run that script
 * than to rewrite this file manually.
 *
 * gendata.py expects each subdirectory under %s/ to contain image files with
 * specific names:
 * 0.png, 1.png, ..., 9.png, colon.png, numbertopbottomborder.png,
 * leftborder.png, rightborder.png, space.png, dot.png, and minus.png.
 *
 * Supported file extensions:
 * %s
 *
 * characterDesignUrls[DESIGN_NAME] gives the array of URLs to character images
 * for the relevant DESIGN_NAME. The URLs in this array are in the same order
 * as the filenames listed above.
 */

""" % (image_dir, image_dir, " ".join(image_extensions)))
        fout.write("const characterDesignUrls = {\n")
        for dir_name in dir_names:
            char_id = 0
            fout.write("\t\"%s\" : [\n" % (dir_name))
            mime_type = None
            for name in filenames:
                for ext in image_extensions:
                    filename = os.path.join(image_dir, dir_name, name + ext)
                    if os.path.exists(filename):
                        mime_type = extension_to_mime[ext]
                        break
                else:
                    print("Couldn't find image for \"%s\" in directory %s" % (name, os.path.join(image_dir, dir_name)))
                    sys.exit(1)
                with open(filename, "rb") as f:
                    data = f.read()
                    base64_string = base64.b64encode(data).decode("utf-8")
                    fout.write("\n\t\t/* %s: from %s */\n" % (symbolic_names[char_id], filename));
                    fout.write("\t\t\"data:" + mime_type + ";base64," + base64_string + "\"");
                fout.write("%s\n" % ("," if char_id < len(filenames) - 1 else ""))
                char_id += 1
            fout.write("\t],\n")
        fout.write("};\n\n");
        for i in range(len(filenames)):
            if i < len(symbolic_names):
                fout.write("const %s = %d;\n" % (symbolic_names[i], i))

except FileNotFoundError as e:
    os.remove(output_file)
    raise e
